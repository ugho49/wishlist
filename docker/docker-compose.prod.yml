services:
  traefik:
    image: traefik:v3.4
    container_name: traefik
    command:
      # Active le fournisseur Docker pour que Traefik détecte les conteneurs
      - '--providers.docker=true'
      # Empêche Traefik d'exposer tous les conteneurs par défaut
      - '--providers.docker.exposedbydefault=false'
      # Crée le point d'entrée pour le trafic HTTP sur le port 80
      - '--entrypoints.web.address=:80'
      # Crée le point d'entrée pour le trafic HTTPS sur le port 443
      - '--entrypoints.websecure.address=:443'
      # Configure le résolveur de certificats Let's Encrypt
      - '--certificatesresolvers.letsencrypt.acme.tlschallenge=true'
      - '--certificatesresolvers.letsencrypt.acme.email=contact@wishlistapp.fr'
      - '--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/wishlistapi.json'
      # Redirige tout le trafic HTTP vers HTTPS
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entrypoints.web.http.redirections.entrypoint.scheme=https'
    ports:
      # Expose les ports web sur le VPS
      - '80:80'
      - '443:443'
    volumes:
      # Permet à Traefik de communiquer avec l'API Docker
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      # Stocke les certificats SSL
      - 'letsencrypt-data:/letsencrypt'
    restart: unless-stopped

  db:
    image: postgres:14.5-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: 'pg_isready -d $DB_NAME -U $DB_USER'

  pgbackups:
    image: prodrigestivill/postgres-backup-local:14-alpine
    restart: always
    volumes:
      - /pgbackups:/backups
    depends_on:
      - db
    environment:
      POSTGRES_HOST: 'db'
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_EXTRA_OPTS: '-Z9 --schema=public --blobs'
      SCHEDULE: '@daily'
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 2
    healthcheck:
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    image: ughoste/wishlist-api:${API_VERSION}
    restart: always
    expose:
      - 3000 # On expose juste le port interne, pas de mapping sur l'hôte !
    volumes:
      - ./firebase:/usr/src/app/dist/apps/api/firebase
    environment:
      PORT: 3000
      DB_HOST: 'db'
      DB_PORT: 5432
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      AUTH_ISSUER: 'Wishlist API'
      AUTH_ACCESS_TOKEN_SECRET: ${AUTH_ACCESS_TOKEN_SECRET}
      AUTH_ACCESS_TOKEN_DURATION: ${AUTH_ACCESS_TOKEN_DURATION}
      AUTH_ACCESS_TOKEN_ALGORITHM: ${AUTH_ACCESS_TOKEN_ALGORITHM}
      AUTH_REFRESH_TOKEN_SECRET: ${AUTH_REFRESH_TOKEN_SECRET}
      AUTH_REFRESH_TOKEN_DURATION: ${AUTH_REFRESH_TOKEN_DURATION}
      AUTH_REFRESH_TOKEN_ALGORITHM: ${AUTH_REFRESH_TOKEN_ALGORITHM}
      RESET_PASSWORD_TOKEN_DURATION_IN_MIN: 15
      RESET_PASSWORD_RENEW_URL: 'https://wishlistapp.fr/forgot-password/renew'
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_USERNAME: ${MAIL_USERNAME}
      FIREBASE_SERVICE_ACCOUNT_KEY_PATH: ${FIREBASE_SERVICE_ACCOUNT_KEY_PATH}
      FIREBASE_BUCKET_NAME: ${FIREBASE_BUCKET_NAME}
    depends_on:
      - 'db'
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:3000/health']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    labels:
      # Active Traefik pour ce service
      - 'traefik.enable=true'
      # Règle de routage HTTPS
      - 'traefik.http.routers.wishlistapi.rule=Host(`api.wishlistapp.fr`)'
      - 'traefik.http.routers.wishlistapi.entrypoints=websecure'
      - 'traefik.http.routers.wishlistapi.tls.certresolver=letsencrypt'
      # Configuration du service
      - 'traefik.http.services.wishlistapi.loadbalancer.server.port=3000'
      - 'traefik.http.services.wishlistapi.loadbalancer.healthcheck.path=/health'

volumes:
  db-data:
  letsencrypt-data:
